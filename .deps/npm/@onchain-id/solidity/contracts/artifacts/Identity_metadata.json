{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialManagementKey",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_isLibrary",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "executionId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "Approved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "claimId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "topic",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "scheme",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "issuer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "uri",
						"type": "string"
					}
				],
				"name": "ClaimAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "claimId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "topic",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "scheme",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "issuer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "uri",
						"type": "string"
					}
				],
				"name": "ClaimChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "claimId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "topic",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "scheme",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "issuer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "uri",
						"type": "string"
					}
				],
				"name": "ClaimRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "executionId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "Executed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "executionId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "ExecutionFailed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "executionId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "ExecutionRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "key",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "purpose",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "keyType",
						"type": "uint256"
					}
				],
				"name": "KeyAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "key",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "purpose",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "keyType",
						"type": "uint256"
					}
				],
				"name": "KeyRemoved",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_topic",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_scheme",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_issuer",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_signature",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					},
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					}
				],
				"name": "addClaim",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "claimRequestId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_key",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "_purpose",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_type",
						"type": "uint256"
					}
				],
				"name": "addKey",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_approve",
						"type": "bool"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "execute",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "executionId",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_claimId",
						"type": "bytes32"
					}
				],
				"name": "getClaim",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "topic",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "scheme",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "issuer",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "string",
						"name": "uri",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_topic",
						"type": "uint256"
					}
				],
				"name": "getClaimIdsByTopic",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "claimIds",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_key",
						"type": "bytes32"
					}
				],
				"name": "getKey",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "purposes",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "keyType",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "key",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_key",
						"type": "bytes32"
					}
				],
				"name": "getKeyPurposes",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "_purposes",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_purpose",
						"type": "uint256"
					}
				],
				"name": "getKeysByPurpose",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "keys",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "sig",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "dataHash",
						"type": "bytes32"
					}
				],
				"name": "getRecoveredAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialManagementKey",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IIdentity",
						"name": "_identity",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "claimTopic",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "sig",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "isClaimValid",
				"outputs": [
					{
						"internalType": "bool",
						"name": "claimValid",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_key",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "_purpose",
						"type": "uint256"
					}
				],
				"name": "keyHasPurpose",
				"outputs": [
					{
						"internalType": "bool",
						"name": "result",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_claimId",
						"type": "bytes32"
					}
				],
				"name": "removeClaim",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_key",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "_purpose",
						"type": "uint256"
					}
				],
				"name": "removeKey",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Implementation of the `IERC734` \"KeyHolder\" and the `IERC735` \"ClaimHolder\" interfaces into a common Identity Contract. This implementation has a separate contract were it declares all storage, allowing for it to be used as an upgradable logic contract.",
			"events": {
				"Approved(uint256,bool)": {
					"details": "Emitted when an execution request was approved. Specification: MUST be triggered when approve was successfully called."
				},
				"ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)": {
					"details": "Emitted when a claim was added. Specification: MUST be triggered when a claim was successfully added."
				},
				"ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)": {
					"details": "Emitted when a claim was changed. Specification: MUST be triggered when addClaim was successfully called on an existing claimId."
				},
				"ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)": {
					"details": "Emitted when a claim was removed. Specification: MUST be triggered when removeClaim was successfully called."
				},
				"Executed(uint256,address,uint256,bytes)": {
					"details": "Emitted when an execute operation was approved and successfully performed. Specification: MUST be triggered when approve was called and the execution was successfully approved."
				},
				"ExecutionFailed(uint256,address,uint256,bytes)": {
					"details": "Emitted when an execute operation was called and failed Specification: MUST be triggered when execute call failed"
				},
				"ExecutionRequested(uint256,address,uint256,bytes)": {
					"details": "Emitted when an execution request was performed via `execute`. Specification: MUST be triggered when execute was successfully called."
				},
				"KeyAdded(bytes32,uint256,uint256)": {
					"details": "Emitted when a key was added to the Identity. Specification: MUST be triggered when addKey was successfully called."
				},
				"KeyRemoved(bytes32,uint256,uint256)": {
					"details": "Emitted when a key was removed from the Identity. Specification: MUST be triggered when removeKey was successfully called."
				}
			},
			"kind": "dev",
			"methods": {
				"addClaim(uint256,uint256,address,bytes,bytes,string)": {
					"details": "See {IERC735-addClaim}.",
					"params": {
						"_data": "The hash of the claim data, sitting in another location, a bit-mask, call data, or actual data based on the claim scheme.",
						"_issuer": "The issuers identity contract address, or the address used to sign the above signature.",
						"_scheme": "The scheme with which this claim SHOULD be verified or how it should be processed.",
						"_signature": "Signature which is the proof that the claim issuer issued a claim of topic for this identity. it MUST be a signed message of the following structure: keccak256(abi.encode(address identityHolder_address, uint256 _ topic, bytes data))",
						"_topic": "The type of claim",
						"_uri": "The location of the claim, this can be HTTP links, swarm hashes, IPFS hashes, and such."
					},
					"returns": {
						"claimRequestId": "Returns claimRequestId: COULD be send to the approve function, to approve or reject this claim. triggers ClaimAdded event."
					}
				},
				"addKey(bytes32,uint256,uint256)": {
					"params": {
						"_key": "keccak256 representation of an ethereum address",
						"_purpose": "a uint256 specifying the key type, like 1 = MANAGEMENT, 2 = ACTION, 3 = CLAIM, 4 = ENCRYPTION",
						"_type": "type of key used, which would be a uint256 for different key types. e.g. 1 = ECDSA, 2 = RSA, etc."
					},
					"returns": {
						"success": "Returns TRUE if the addition was successful and FALSE if not"
					}
				},
				"approve(uint256,bool)": {
					"details": "See {IERC734-approve}."
				},
				"constructor": {
					"params": {
						"_isLibrary": "boolean value stating if the contract is library or not calls __Identity_init if contract is not library",
						"initialManagementKey": "the address of the management key at deployment"
					}
				},
				"execute(address,uint256,bytes)": {
					"details": "See {IERC734-execute}.",
					"returns": {
						"executionId": "to use in the approve function, to approve or reject this execution."
					}
				},
				"getClaim(bytes32)": {
					"details": "See {IERC735-getClaim}.",
					"params": {
						"_claimId": "The identity of the claim i.e. keccak256(abi.encode(_issuer, _topic))"
					},
					"returns": {
						"data": "Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .",
						"issuer": "Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .",
						"scheme": "Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .",
						"signature": "Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .",
						"topic": "Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) .",
						"uri": "Returns all the parameters of the claim for the specified _claimId (topic, scheme, signature, issuer, data, uri) ."
					}
				},
				"getClaimIdsByTopic(uint256)": {
					"details": "See {IERC735-getClaimIdsByTopic}.",
					"params": {
						"_topic": "The identity of the claim i.e. keccak256(abi.encode(_issuer, _topic))"
					},
					"returns": {
						"claimIds": "Returns an array of claim IDs by topic."
					}
				},
				"getKey(bytes32)": {
					"details": "See {IERC734-getKey}.",
					"params": {
						"_key": "The public key.  for non-hex and long keys, its the Keccak256 hash of the key"
					},
					"returns": {
						"key": "Returns the full key data, if present in the identity.",
						"keyType": "Returns the full key data, if present in the identity.",
						"purposes": "Returns the full key data, if present in the identity."
					}
				},
				"getKeyPurposes(bytes32)": {
					"details": "See {IERC734-getKeyPurposes}.",
					"params": {
						"_key": "The public key.  for non-hex and long keys, its the Keccak256 hash of the key"
					},
					"returns": {
						"_purposes": "Returns the purposes of the specified key"
					}
				},
				"getKeysByPurpose(uint256)": {
					"details": "See {IERC734-getKeysByPurpose}.",
					"params": {
						"_purpose": "a uint256[] Array of the key types, like 1 = MANAGEMENT, 2 = ACTION, 3 = CLAIM, 4 = ENCRYPTION"
					},
					"returns": {
						"keys": "Returns an array of public key bytes32 hold by this identity and having the specified purpose"
					}
				},
				"getRecoveredAddress(bytes,bytes32)": {
					"details": "returns the address that signed the given data",
					"params": {
						"dataHash": "the data that was signed returns the address that signed dataHash and created the signature sig",
						"sig": "the signature of the data"
					}
				},
				"initialize(address)": {
					"params": {
						"initialManagementKey": "The ethereum address to be set as the management key of the ONCHAINID."
					}
				},
				"isClaimValid(address,uint256,bytes,bytes)": {
					"details": "Checks if a claim is valid. Claims issued by the identity are self-attested claims. They do not have a built-in revocation mechanism and are considered valid as long as their signature is valid and they are still stored by the identity contract.",
					"params": {
						"_identity": "the identity contract related to the claim",
						"claimTopic": "the claim topic of the claim",
						"data": "the data field of the claim",
						"sig": "the signature of the claim"
					},
					"returns": {
						"claimValid": "true if the claim is valid, false otherwise"
					}
				},
				"keyHasPurpose(bytes32,uint256)": {
					"details": "See {IERC734-keyHasPurpose}."
				},
				"removeClaim(bytes32)": {
					"details": "See {IERC735-removeClaim}.",
					"params": {
						"_claimId": "The identity of the claim i.e. keccak256(abi.encode(_issuer, _topic))"
					},
					"returns": {
						"success": "Returns TRUE when the claim was removed. triggers ClaimRemoved event"
					}
				},
				"removeKey(bytes32,uint256)": {
					"details": "See {IERC734-removeKey}."
				},
				"version()": {
					"details": "Returns the string of the current version."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addClaim(uint256,uint256,address,bytes,bytes,string)": {
					"notice": "Implementation of the addClaim function from the ERC-735 standard  Require that the msg.sender has claim signer key."
				},
				"addKey(bytes32,uint256,uint256)": {
					"notice": "implementation of the addKey function of the ERC-734 standard Adds a _key to the identity. The _purpose specifies the purpose of key. Initially we propose four purposes: 1: MANAGEMENT keys, which can manage the identity 2: ACTION keys, which perform actions in this identities name (signing, logins, transactions, etc.) 3: CLAIM signer keys, used to sign claims on other identities which need to be revokable. 4: ENCRYPTION keys, used to encrypt data e.g. hold in claims. MUST only be done by keys of purpose 1, or the identity itself. If its the identity itself, the approval process will determine its approval."
				},
				"approve(uint256,bool)": {
					"notice": "Approves an execution.  If the sender is an ACTION key and the destination address is not the identity contract itself, then the  approval is authorized and the operation would be performed.  If the destination address is the identity itself, then the execution would be authorized and performed only  if the sender is a MANAGEMENT key."
				},
				"constructor": {
					"notice": "constructor of the Identity contract"
				},
				"execute(address,uint256,bytes)": {
					"notice": "Passes an execution instruction to the keymanager. If the sender is an ACTION key and the destination address is not the identity contract itself, then the execution is immediately approved and performed. If the destination address is the identity itself, then the execution would be performed immediately only if the sender is a MANAGEMENT key. Otherwise the execution request must be approved via the `approve` method."
				},
				"getClaim(bytes32)": {
					"notice": "Implementation of the getClaim function from the ERC-735 standard."
				},
				"getClaimIdsByTopic(uint256)": {
					"notice": "Implementation of the getClaimIdsByTopic function from the ERC-735 standard. used to get all the claims from the specified topic"
				},
				"getKey(bytes32)": {
					"notice": "Implementation of the getKey function from the ERC-734 standard"
				},
				"getKeyPurposes(bytes32)": {
					"notice": "gets the purposes of a key"
				},
				"getKeysByPurpose(uint256)": {
					"notice": "gets all the keys with a specific purpose from an identity"
				},
				"initialize(address)": {
					"notice": "When using this contract as an implementation for a proxy, call this initializer with a delegatecall."
				},
				"keyHasPurpose(bytes32,uint256)": {
					"notice": "Returns true if the key has MANAGEMENT purpose or the specified purpose."
				},
				"removeClaim(bytes32)": {
					"notice": "Implementation of the removeClaim function from the ERC-735 standard Require that the msg.sender has management key. Can only be removed by the claim issuer, or the claim holder itself."
				},
				"removeKey(bytes32,uint256)": {
					"notice": "Remove the purpose from a key."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@onchain-id/solidity/contracts/Identity.sol": "Identity"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@onchain-id/solidity/contracts/Identity.sol": {
			"keccak256": "0x9da2ac61454d3c68b20eb7abb952fe0ab72c3c0f3eddb0d1c33daffbf4082319",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://d6c222c596c93de3d9e8bb4c2efadd0fe7210dc8986327bfe9ec8ed757e59521",
				"dweb:/ipfs/QmVkyVm4rLFEF9Le6AERskXMWAhzgsAjJdjHLLySQ3ECgP"
			]
		},
		".deps/npm/@onchain-id/solidity/contracts/interface/IClaimIssuer.sol": {
			"keccak256": "0x5ee27a47afe166bd5cb8861cdcbf647a841e5be9fa78a583e19a6a0d0c5b87e4",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://1f11f4b192926d4095abd3bcbf57d19c4a8c266f2b2e6e41d9cb06b89bc1c200",
				"dweb:/ipfs/QmVLKqwUGXrCayFuzcs2LLhPr6pjyvn9UinYp2CzKbVBAJ"
			]
		},
		".deps/npm/@onchain-id/solidity/contracts/interface/IERC734.sol": {
			"keccak256": "0x1176024fe195d6776b18c639a7aae7f41cec2e42a1512a8653372d60c89e6b55",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://645998579c349ef1ff2dcf49477a21d0c1ed48784e54bda4e49c48de1de3cb8f",
				"dweb:/ipfs/QmVpGS1VZ54KtzJapCaBZ7dBMCk5fFpKn1rybYzhQdbYiH"
			]
		},
		".deps/npm/@onchain-id/solidity/contracts/interface/IERC735.sol": {
			"keccak256": "0x8484095fb545237cbaf3ea70761bf168c77fc54323dab5f8ad74ee4dcd416aaa",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://955c3fa2a62da7504d4d8be49b23c3ea31ac7f577038b204d7681573f8791b97",
				"dweb:/ipfs/QmVFDPFZiGGcy3cbgYXAhRPRLGJfpEw3YvwWaGMMkdQf2d"
			]
		},
		".deps/npm/@onchain-id/solidity/contracts/interface/IIdentity.sol": {
			"keccak256": "0x908fef4a1a0962facdd9c6b14417edc284864d78805e07eac256d54e415f6186",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://cdf0abb91e57adc8111ebeec931a15ea28d86216354917e9de34f40a998bb264",
				"dweb:/ipfs/QmarS6ikrWSV7vBY56WmC3ENbsLgf15PTPRoa5HYCfr9vo"
			]
		},
		".deps/npm/@onchain-id/solidity/contracts/storage/Storage.sol": {
			"keccak256": "0x069cde4c6b907998363321117446ee2fa269732d3315f1f607123f5d8e3b4d13",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://2c95964f148d5f4dc150dc35807ee52af4238efad4dd9d834121f60c449cf473",
				"dweb:/ipfs/QmNvdiMCXUrzfjeDEJtf92JGgWtKxt8kEB5LKeEF7TU9Nu"
			]
		},
		".deps/npm/@onchain-id/solidity/contracts/storage/Structs.sol": {
			"keccak256": "0x4cc1dc80265e110342fc791e6bb95392c8698ff701fd41c9e35bf9cf7ff5bd32",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://3f2ad40831a23a7d8ea156b26a7ad9152785a78aa70ff0463bcdbbbda791cc2c",
				"dweb:/ipfs/QmX8DicmSMnARZctXdMaKRatBb5e2djdqGHwrwLP3SFMVV"
			]
		},
		".deps/npm/@onchain-id/solidity/contracts/version/Version.sol": {
			"keccak256": "0x9edca39fb2e35af59f82ce30de0f2b7727e0a2df9cf9b703288db868ea4e8405",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bf16acdc9fbada3d392c243f3ded28d654084f2c367c7103b1769f0ee0a7b1a4",
				"dweb:/ipfs/QmeVUtHa9LGdiaxKav6swxHuWTYLhz3FXbQfY4wUMUKd97"
			]
		}
	},
	"version": 1
}