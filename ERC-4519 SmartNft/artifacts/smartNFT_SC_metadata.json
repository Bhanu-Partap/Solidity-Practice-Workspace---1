{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenID",
						"type": "uint256"
					}
				],
				"name": "OwnerEngaged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenID",
						"type": "uint256"
					}
				],
				"name": "TimeoutAlarm",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenID",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_addressUser",
						"type": "address"
					}
				],
				"name": "UserAssigned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenID",
						"type": "uint256"
					}
				],
				"name": "UserEngaged",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_approved",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "checkTimeout",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addressSD",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_addressOwner",
						"type": "address"
					}
				],
				"name": "createToken",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getInfoToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "_BCA_OWNER",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_BCA_USER",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_BCA_SD",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "_state",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addressSD",
						"type": "address"
					}
				],
				"name": "getInfoTokenFromBCA",
				"outputs": [
					{
						"internalType": "address",
						"name": "_BCA_OWNER",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_BCA_USER",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "_state",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_hashK_D",
						"type": "uint256"
					}
				],
				"name": "ownerEngagement",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addressSD",
						"type": "address"
					}
				],
				"name": "ownerOfFromBCA",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_timeout",
						"type": "uint256"
					}
				],
				"name": "setTimeout",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_addressUser",
						"type": "address"
					}
				],
				"name": "setUser",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_dataEngagement",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_hashK_O",
						"type": "uint256"
					}
				],
				"name": "startOwnerEngagement",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_dataEngagement",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_hashK_U",
						"type": "uint256"
					}
				],
				"name": "startUserEngagement",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addressSD",
						"type": "address"
					}
				],
				"name": "tokenFromBCA",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "updateTimestamp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addressUser",
						"type": "address"
					}
				],
				"name": "userBalanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addressUser",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_addressOwner",
						"type": "address"
					}
				],
				"name": "userBalanceOfAnOwner",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_hashK_D",
						"type": "uint256"
					}
				],
				"name": "userEngagement",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "userOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_addressSD",
						"type": "address"
					}
				],
				"name": "userOfFromBCA",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"approve(address,uint256)": {
					"details": "The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.",
					"params": {
						"_approved": "The new approved NFT controller",
						"_tokenId": "The NFT to approve"
					}
				},
				"balanceOf(address)": {
					"details": "NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.",
					"params": {
						"_owner": "An address for whom to query the balance"
					},
					"returns": {
						"_0": "The number of NFTs owned by `_owner`, possibly zero"
					}
				},
				"createToken(address,address)": {
					"details": "Only the manufacturer of the smart device account can create a token and will be the first owner of the token  The initial state of the token is \"waitingForOwner\" until verified by the new owner",
					"params": {
						"_addressSD": "An address generated by the smart device. Only de smart device can generate this account. _addressOwner is the first owner of the Smart Device"
					},
					"returns": {
						"_0": "The tokenID of the token bound to the smart device"
					}
				},
				"getApproved(uint256)": {
					"details": "Throws if `_tokenId` is not a valid NFT",
					"params": {
						"_tokenId": "The NFT to find the approved address for"
					},
					"returns": {
						"_0": "The approved address for this NFT, or the zero address if there is none"
					}
				},
				"isApprovedForAll(address,address)": {
					"params": {
						"_operator": "The address that acts on behalf of the owner",
						"_owner": "The address that owns the NFTs"
					},
					"returns": {
						"_0": "True if `_operator` is an approved operator for `_owner`, false otherwise"
					}
				},
				"ownerOf(uint256)": {
					"details": "NFTs assigned to zero address are considered invalid, and queries  about them do throw.",
					"params": {
						"_tokenId": "The identifier for an NFT"
					},
					"returns": {
						"_0": "The address of the owner of the NFT"
					}
				},
				"ownerOfFromBCA(address)": {
					"details": "Everybody can call this function. It does not execute any code on blockchain, only reads",
					"params": {
						"_addressSD": "The address to obtain its owner"
					},
					"returns": {
						"_0": "The owner of the token bound to _addressSD"
					}
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "This works identically to the other function with an extra data parameter,  except this function just sets data to \"\"",
					"params": {
						"_from": "The current owner of the NFT",
						"_to": "The new owner",
						"_tokenId": "The NFT to transfer"
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.",
					"params": {
						"_from": "The current owner of the NFT",
						"_to": "The new owner",
						"_tokenId": "The NFT to transfer",
						"data": "Additional data with no specified format, sent in call to `_to`"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.",
					"params": {
						"_approved": "True if the operator is approved, false to revoke approval",
						"_operator": "Address to add to the set of authorized operators."
					}
				},
				"setUser(uint256,address)": {
					"details": "Only the owner of the token account can transfer a token provided that the state of the token is \"engagedWithOwner\",\"waitingForUser\" or \"engagedWithUser\".  The state of the token must change to \"waitingForUser\" and the parameter addressUser of the token defined by _tokenID must change to _addressUser",
					"params": {
						"_addressUser": "The address of the new user",
						"_tokenId": "The tokenID of the smart device"
					}
				},
				"tokenFromBCA(address)": {
					"details": "Everybody can call this function. It does not execute any code on blockchain, only reads",
					"params": {
						"_addressSD": "The address to obtain its token ID"
					},
					"returns": {
						"_0": "The token ID of the token bound to _addressSD"
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.",
					"params": {
						"_from": "The current owner of the NFT",
						"_to": "The new owner",
						"_tokenId": "The NFT to transfer"
					}
				},
				"userBalanceOf(address)": {
					"details": "Everybody can call this function. It does not execute any code on blockchain, only reads",
					"params": {
						"_addressUser": "The address of the user to know the number of tokens"
					},
					"returns": {
						"_0": "The number of tokens of the user"
					}
				},
				"userBalanceOfAnOwner(address,address)": {
					"details": "Everybody can call this function. It does not execute any code on blockchain, only reads",
					"params": {
						"_addressOwner": "The address of the owner of the tokens",
						"_addressUser": "The address of the user to know the number of tokens"
					},
					"returns": {
						"_0": "The number of tokens of an owner that an user can use"
					}
				},
				"userOf(uint256)": {
					"details": "Everybody can call this function. It does not execute any code on blockchain, only reads",
					"params": {
						"_tokenId": "of the token to obtain its user"
					},
					"returns": {
						"_0": "The user of the token with _tokenId"
					}
				},
				"userOfFromBCA(address)": {
					"details": "Everybody can call this function. It does not execute any code on blockchain, only reads",
					"params": {
						"_addressSD": "The address to obtain its user."
					},
					"returns": {
						"_0": "The user of the token bound to _addressSD."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approve(address,uint256)": {
					"notice": "Set or reaffirm the approved address for an NFT"
				},
				"balanceOf(address)": {
					"notice": "Count all NFTs assigned to an owner"
				},
				"createToken(address,address)": {
					"notice": "This function defines how the smart device is bound to a new token"
				},
				"getApproved(uint256)": {
					"notice": "Get the approved address for a single NFT"
				},
				"isApprovedForAll(address,address)": {
					"notice": "Query if an address is an authorized operator for another address"
				},
				"ownerOf(uint256)": {
					"notice": "Find the owner of an NFT"
				},
				"ownerOfFromBCA(address)": {
					"notice": "This function let us know who is the owner of the token from the address of the smart device"
				},
				"safeTransferFrom(address,address,uint256)": {
					"notice": "Transfers the ownership of an NFT from one address to another address"
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"notice": "Transfers the ownership of an NFT from one address to another address"
				},
				"setApprovalForAll(address,bool)": {
					"notice": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s assets."
				},
				"setUser(uint256,address)": {
					"notice": "This function defines the transference of use of a smart device"
				},
				"tokenFromBCA(address)": {
					"notice": "This function let us obtain the tokenID from an address of smart device "
				},
				"transferFrom(address,address,uint256)": {
					"notice": "Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST"
				},
				"userBalanceOf(address)": {
					"notice": "This function let us know how many tokens an user has"
				},
				"userBalanceOfAnOwner(address,address)": {
					"notice": "This function let us know how many tokens of an owner an user has"
				},
				"userOf(uint256)": {
					"notice": "This function let us know who is the user of the token from the tokenId"
				},
				"userOfFromBCA(address)": {
					"notice": "This function let us know who is the user of the token from the address of the smart device"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"ERC-4519 SmartNft/SmartNFT.sol": "smartNFT_SC"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"ERC-4519 SmartNft/ERC721_interface.sol": {
			"keccak256": "0x4904c99c81d0f0919f6288aa55a1e4cc17d4128611ec58383a9a6e7fddc1ff6c",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://3611cb816af28152767e2920c578cac3c0b48c1d8186f105025cb2d37609f355",
				"dweb:/ipfs/QmZU4AnQxgRXwPyuqQ7VoVpAH8xtMnHn7VxsLyCXMobT8e"
			]
		},
		"ERC-4519 SmartNft/SmartNFT.sol": {
			"keccak256": "0x3137322dda097cf008e3680266cb41249a9fdf22d1dd458e39ef407ec22fc398",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://9919490a174d37a77afafa40f64281a8f8d8fdd6dcf53d8e5c2c32ce8fa1d450",
				"dweb:/ipfs/QmSZrQQ7isJjHa4fU7qAnGega8aNrPAWq1HhVBmCDkvqvN"
			]
		},
		"ERC-4519 SmartNft/smartNFT_interface.sol": {
			"keccak256": "0x32f5e82bc8f948bb7aee3f1406c1c875d6b50cb834f78cdc9914284fbe595970",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://60d3f49c2584734b34b9517b10e2e73787d0fefa46b9983f99f376a9431c4c3c",
				"dweb:/ipfs/QmYHvNVu6c9SLJDzAQWu52xLSkcbR2w7HhfXiiSQ9ocUUR"
			]
		}
	},
	"version": 1
}